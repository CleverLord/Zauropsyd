//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Logo.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class LogoParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		DOT=1, DIGIT=2, LETTER=3, COLON=4, COMMA=5, QUOTE=6, OPER_ADD=7, OPER_SUB=8, 
		OPER_MUL=9, OPER_DIV=10, BRA_L=11, BRA_R=12, SQB_L=13, SQB_R=14, COMP_EQ=15, 
		COMP_L=16, COMP_LE=17, COMP_G=18, COMP_GE=19, COMP_NE=20, SEMI=21, MAKE_SYM=22, 
		LOCAL_SYM=23, TO_SYM=24, END_SYM=25, IF_SYM=26, REPEAT_SYM=27, WHILE_SYM=28, 
		OUTPUT_SYM=29, MOVE_FD=30, MOVE_BK=31, MOVE_LT=32, MOVE_RT=33, PEN_UP=34, 
		PEN_DOWN=35, WHITESPACE=36;
	public const int
		RULE_int_type = 0, RULE_float_type = 1, RULE_string_type = 2, RULE_identifier = 3, 
		RULE_operand = 4, RULE_comparator_gen = 5, RULE_num_val = 6, RULE_operation_gen = 7, 
		RULE_value_gen = 8, RULE_list_acc = 9, RULE_cond = 10, RULE_list_type = 11, 
		RULE_move_keyword = 12, RULE_move_command = 13, RULE_pen_command = 14, 
		RULE_if_command = 15, RULE_if_faker = 16, RULE_list_gen = 17, RULE_assignment_gen = 18, 
		RULE_output_instruction_gen = 19, RULE_instruction_gen = 20, RULE_function_instr = 21, 
		RULE_repeat_loop = 22, RULE_repeat_start = 23, RULE_while_loop = 24, RULE_loop_gen = 25, 
		RULE_instructions_gen = 26, RULE_starter = 27;
	public static readonly string[] ruleNames = {
		"int_type", "float_type", "string_type", "identifier", "operand", "comparator_gen", 
		"num_val", "operation_gen", "value_gen", "list_acc", "cond", "list_type", 
		"move_keyword", "move_command", "pen_command", "if_command", "if_faker", 
		"list_gen", "assignment_gen", "output_instruction_gen", "instruction_gen", 
		"function_instr", "repeat_loop", "repeat_start", "while_loop", "loop_gen", 
		"instructions_gen", "starter"
	};

	private static readonly string[] _LiteralNames = {
		null, "'.'", null, null, "':'", "','", "'\"'", "'+'", "'-'", "'*'", "'/'", 
		"'('", "')'", "'['", "']'", "'='", "'<'", "'<='", "'>'", "'>='", "'!='", 
		"';'", "'MAKE'", "'LOCAL'", "'TO'", "'END'", "'IF'", "'REPEAT'", "'WHILE'", 
		"'OUTPUT'", "'FD'", "'BK'", "'LT'", "'RT'", "'PU'", "'PD'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "DOT", "DIGIT", "LETTER", "COLON", "COMMA", "QUOTE", "OPER_ADD", 
		"OPER_SUB", "OPER_MUL", "OPER_DIV", "BRA_L", "BRA_R", "SQB_L", "SQB_R", 
		"COMP_EQ", "COMP_L", "COMP_LE", "COMP_G", "COMP_GE", "COMP_NE", "SEMI", 
		"MAKE_SYM", "LOCAL_SYM", "TO_SYM", "END_SYM", "IF_SYM", "REPEAT_SYM", 
		"WHILE_SYM", "OUTPUT_SYM", "MOVE_FD", "MOVE_BK", "MOVE_LT", "MOVE_RT", 
		"PEN_UP", "PEN_DOWN", "WHITESPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Logo.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static LogoParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}


		// using UnityEngine;
	 	// using System.Collections;
		public Scheduler scheduler = new Scheduler();
		// public TurtleControl controller = GameObject.Find("Turtle").GetComponent<TurtleControl>();

		public LogoParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public LogoParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Int_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIGIT() { return GetTokens(LogoParser.DIGIT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGIT(int i) {
			return GetToken(LogoParser.DIGIT, i);
		}
		public Int_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_int_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogoListener typedListener = listener as ILogoListener;
			if (typedListener != null) typedListener.EnterInt_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogoListener typedListener = listener as ILogoListener;
			if (typedListener != null) typedListener.ExitInt_type(this);
		}
	}

	[RuleVersion(0)]
	public Int_typeContext int_type() {
		Int_typeContext _localctx = new Int_typeContext(Context, State);
		EnterRule(_localctx, 0, RULE_int_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 57;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 56;
				Match(DIGIT);
				}
				}
				State = 59;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==DIGIT );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Float_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Int_typeContext[] int_type() {
			return GetRuleContexts<Int_typeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Int_typeContext int_type(int i) {
			return GetRuleContext<Int_typeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(LogoParser.DOT, 0); }
		public Float_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_float_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogoListener typedListener = listener as ILogoListener;
			if (typedListener != null) typedListener.EnterFloat_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogoListener typedListener = listener as ILogoListener;
			if (typedListener != null) typedListener.ExitFloat_type(this);
		}
	}

	[RuleVersion(0)]
	public Float_typeContext float_type() {
		Float_typeContext _localctx = new Float_typeContext(Context, State);
		EnterRule(_localctx, 2, RULE_float_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 61;
			int_type();
			State = 62;
			Match(DOT);
			State = 63;
			int_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class String_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] QUOTE() { return GetTokens(LogoParser.QUOTE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUOTE(int i) {
			return GetToken(LogoParser.QUOTE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LETTER() { return GetTokens(LogoParser.LETTER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LETTER(int i) {
			return GetToken(LogoParser.LETTER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIGIT() { return GetTokens(LogoParser.DIGIT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGIT(int i) {
			return GetToken(LogoParser.DIGIT, i);
		}
		public String_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogoListener typedListener = listener as ILogoListener;
			if (typedListener != null) typedListener.EnterString_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogoListener typedListener = listener as ILogoListener;
			if (typedListener != null) typedListener.ExitString_type(this);
		}
	}

	[RuleVersion(0)]
	public String_typeContext string_type() {
		String_typeContext _localctx = new String_typeContext(Context, State);
		EnterRule(_localctx, 4, RULE_string_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 65;
			Match(QUOTE);
			State = 69;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DIGIT || _la==LETTER) {
				{
				{
				State = 66;
				_la = TokenStream.LA(1);
				if ( !(_la==DIGIT || _la==LETTER) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 71;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 72;
			Match(QUOTE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LETTER() { return GetTokens(LogoParser.LETTER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LETTER(int i) {
			return GetToken(LogoParser.LETTER, i);
		}
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogoListener typedListener = listener as ILogoListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogoListener typedListener = listener as ILogoListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 6, RULE_identifier);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 74;
			Match(LETTER);
			State = 78;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 75;
					Match(LETTER);
					}
					} 
				}
				State = 80;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPER_ADD() { return GetToken(LogoParser.OPER_ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPER_SUB() { return GetToken(LogoParser.OPER_SUB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPER_MUL() { return GetToken(LogoParser.OPER_MUL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPER_DIV() { return GetToken(LogoParser.OPER_DIV, 0); }
		public OperandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogoListener typedListener = listener as ILogoListener;
			if (typedListener != null) typedListener.EnterOperand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogoListener typedListener = listener as ILogoListener;
			if (typedListener != null) typedListener.ExitOperand(this);
		}
	}

	[RuleVersion(0)]
	public OperandContext operand() {
		OperandContext _localctx = new OperandContext(Context, State);
		EnterRule(_localctx, 8, RULE_operand);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 81;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OPER_ADD) | (1L << OPER_SUB) | (1L << OPER_MUL) | (1L << OPER_DIV))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Comparator_genContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMP_EQ() { return GetToken(LogoParser.COMP_EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMP_NE() { return GetToken(LogoParser.COMP_NE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMP_L() { return GetToken(LogoParser.COMP_L, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMP_LE() { return GetToken(LogoParser.COMP_LE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMP_G() { return GetToken(LogoParser.COMP_G, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMP_GE() { return GetToken(LogoParser.COMP_GE, 0); }
		public Comparator_genContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparator_gen; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogoListener typedListener = listener as ILogoListener;
			if (typedListener != null) typedListener.EnterComparator_gen(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogoListener typedListener = listener as ILogoListener;
			if (typedListener != null) typedListener.ExitComparator_gen(this);
		}
	}

	[RuleVersion(0)]
	public Comparator_genContext comparator_gen() {
		Comparator_genContext _localctx = new Comparator_genContext(Context, State);
		EnterRule(_localctx, 10, RULE_comparator_gen);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 83;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << COMP_EQ) | (1L << COMP_L) | (1L << COMP_LE) | (1L << COMP_G) | (1L << COMP_GE) | (1L << COMP_NE))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Num_valContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Int_typeContext int_type() {
			return GetRuleContext<Int_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Float_typeContext float_type() {
			return GetRuleContext<Float_typeContext>(0);
		}
		public Num_valContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_num_val; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogoListener typedListener = listener as ILogoListener;
			if (typedListener != null) typedListener.EnterNum_val(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogoListener typedListener = listener as ILogoListener;
			if (typedListener != null) typedListener.ExitNum_val(this);
		}
	}

	[RuleVersion(0)]
	public Num_valContext num_val() {
		Num_valContext _localctx = new Num_valContext(Context, State);
		EnterRule(_localctx, 12, RULE_num_val);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 87;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				{
				State = 85;
				int_type();
				}
				break;
			case 2:
				{
				State = 86;
				float_type();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operation_genContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Num_valContext[] num_val() {
			return GetRuleContexts<Num_valContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Num_valContext num_val(int i) {
			return GetRuleContext<Num_valContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperandContext operand() {
			return GetRuleContext<OperandContext>(0);
		}
		public Operation_genContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operation_gen; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogoListener typedListener = listener as ILogoListener;
			if (typedListener != null) typedListener.EnterOperation_gen(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogoListener typedListener = listener as ILogoListener;
			if (typedListener != null) typedListener.ExitOperation_gen(this);
		}
	}

	[RuleVersion(0)]
	public Operation_genContext operation_gen() {
		Operation_genContext _localctx = new Operation_genContext(Context, State);
		EnterRule(_localctx, 14, RULE_operation_gen);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 89;
			num_val();
			State = 90;
			operand();
			State = 91;
			num_val();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Value_genContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Num_valContext[] num_val() {
			return GetRuleContexts<Num_valContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Num_valContext num_val(int i) {
			return GetRuleContext<Num_valContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public List_accContext list_acc() {
			return GetRuleContext<List_accContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(LogoParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OperandContext operand() {
			return GetRuleContext<OperandContext>(0);
		}
		public Value_genContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value_gen; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogoListener typedListener = listener as ILogoListener;
			if (typedListener != null) typedListener.EnterValue_gen(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogoListener typedListener = listener as ILogoListener;
			if (typedListener != null) typedListener.ExitValue_gen(this);
		}
	}

	[RuleVersion(0)]
	public Value_genContext value_gen() {
		Value_genContext _localctx = new Value_genContext(Context, State);
		EnterRule(_localctx, 16, RULE_value_gen);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 104;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				{
				State = 93;
				num_val();
				}
				break;
			case 2:
				{
				State = 94;
				identifier();
				State = 95;
				list_acc();
				}
				break;
			case 3:
				{
				State = 97;
				identifier();
				State = 98;
				Match(DOT);
				}
				break;
			case 4:
				{
				State = 100;
				num_val();
				State = 101;
				operand();
				State = 102;
				num_val();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class List_accContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQB_L() { return GetToken(LogoParser.SQB_L, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Value_genContext value_gen() {
			return GetRuleContext<Value_genContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQB_R() { return GetToken(LogoParser.SQB_R, 0); }
		public List_accContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list_acc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogoListener typedListener = listener as ILogoListener;
			if (typedListener != null) typedListener.EnterList_acc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogoListener typedListener = listener as ILogoListener;
			if (typedListener != null) typedListener.ExitList_acc(this);
		}
	}

	[RuleVersion(0)]
	public List_accContext list_acc() {
		List_accContext _localctx = new List_accContext(Context, State);
		EnterRule(_localctx, 18, RULE_list_acc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 106;
			Match(SQB_L);
			State = 107;
			value_gen();
			State = 108;
			Match(SQB_R);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CondContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Value_genContext[] value_gen() {
			return GetRuleContexts<Value_genContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Value_genContext value_gen(int i) {
			return GetRuleContext<Value_genContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Comparator_genContext comparator_gen() {
			return GetRuleContext<Comparator_genContext>(0);
		}
		public CondContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cond; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogoListener typedListener = listener as ILogoListener;
			if (typedListener != null) typedListener.EnterCond(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogoListener typedListener = listener as ILogoListener;
			if (typedListener != null) typedListener.ExitCond(this);
		}
	}

	[RuleVersion(0)]
	public CondContext cond() {
		CondContext _localctx = new CondContext(Context, State);
		EnterRule(_localctx, 20, RULE_cond);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 110;
			value_gen();
			State = 111;
			comparator_gen();
			State = 112;
			value_gen();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class List_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQB_L() { return GetToken(LogoParser.SQB_L, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQB_R() { return GetToken(LogoParser.SQB_R, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Value_genContext[] value_gen() {
			return GetRuleContexts<Value_genContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Value_genContext value_gen(int i) {
			return GetRuleContext<Value_genContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public List_typeContext[] list_type() {
			return GetRuleContexts<List_typeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public List_typeContext list_type(int i) {
			return GetRuleContext<List_typeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(LogoParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(LogoParser.COMMA, i);
		}
		public List_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogoListener typedListener = listener as ILogoListener;
			if (typedListener != null) typedListener.EnterList_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogoListener typedListener = listener as ILogoListener;
			if (typedListener != null) typedListener.ExitList_type(this);
		}
	}

	[RuleVersion(0)]
	public List_typeContext list_type() {
		List_typeContext _localctx = new List_typeContext(Context, State);
		EnterRule(_localctx, 22, RULE_list_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 114;
			Match(SQB_L);
			State = 117;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DIGIT:
			case LETTER:
				{
				State = 115;
				value_gen();
				}
				break;
			case SQB_L:
				{
				State = 116;
				list_type();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 126;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 119;
				Match(COMMA);
				State = 122;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DIGIT:
				case LETTER:
					{
					State = 120;
					value_gen();
					}
					break;
				case SQB_L:
					{
					State = 121;
					list_type();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				State = 128;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 129;
			Match(SQB_R);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Move_keywordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOVE_FD() { return GetToken(LogoParser.MOVE_FD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOVE_BK() { return GetToken(LogoParser.MOVE_BK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOVE_LT() { return GetToken(LogoParser.MOVE_LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOVE_RT() { return GetToken(LogoParser.MOVE_RT, 0); }
		public Move_keywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_move_keyword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogoListener typedListener = listener as ILogoListener;
			if (typedListener != null) typedListener.EnterMove_keyword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogoListener typedListener = listener as ILogoListener;
			if (typedListener != null) typedListener.ExitMove_keyword(this);
		}
	}

	[RuleVersion(0)]
	public Move_keywordContext move_keyword() {
		Move_keywordContext _localctx = new Move_keywordContext(Context, State);
		EnterRule(_localctx, 24, RULE_move_keyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 131;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MOVE_FD) | (1L << MOVE_BK) | (1L << MOVE_LT) | (1L << MOVE_RT))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Move_commandContext : ParserRuleContext {
		public Move_keywordContext _move_keyword;
		public Value_genContext _value_gen;
		[System.Diagnostics.DebuggerNonUserCode] public Move_keywordContext move_keyword() {
			return GetRuleContext<Move_keywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Value_genContext value_gen() {
			return GetRuleContext<Value_genContext>(0);
		}
		public Move_commandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_move_command; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogoListener typedListener = listener as ILogoListener;
			if (typedListener != null) typedListener.EnterMove_command(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogoListener typedListener = listener as ILogoListener;
			if (typedListener != null) typedListener.ExitMove_command(this);
		}
	}

	[RuleVersion(0)]
	public Move_commandContext move_command() {
		Move_commandContext _localctx = new Move_commandContext(Context, State);
		EnterRule(_localctx, 26, RULE_move_command);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 133;
			_localctx._move_keyword = move_keyword();
			State = 134;
			_localctx._value_gen = value_gen();

					scheduler.AddCommand((_localctx._move_keyword!=null?TokenStream.GetText(_localctx._move_keyword.Start,_localctx._move_keyword.Stop):null), (_localctx._value_gen!=null?TokenStream.GetText(_localctx._value_gen.Start,_localctx._value_gen.Stop):null));
					
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pen_commandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PEN_UP() { return GetToken(LogoParser.PEN_UP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PEN_DOWN() { return GetToken(LogoParser.PEN_DOWN, 0); }
		public Pen_commandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pen_command; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogoListener typedListener = listener as ILogoListener;
			if (typedListener != null) typedListener.EnterPen_command(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogoListener typedListener = listener as ILogoListener;
			if (typedListener != null) typedListener.ExitPen_command(this);
		}
	}

	[RuleVersion(0)]
	public Pen_commandContext pen_command() {
		Pen_commandContext _localctx = new Pen_commandContext(Context, State);
		EnterRule(_localctx, 28, RULE_pen_command);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 137;
			_la = TokenStream.LA(1);
			if ( !(_la==PEN_UP || _la==PEN_DOWN) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_commandContext : ParserRuleContext {
		public CondContext _cond;
		public Instructions_genContext _instructions_gen;
		[System.Diagnostics.DebuggerNonUserCode] public If_fakerContext if_faker() {
			return GetRuleContext<If_fakerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SQB_L() { return GetTokens(LogoParser.SQB_L); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQB_L(int i) {
			return GetToken(LogoParser.SQB_L, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CondContext cond() {
			return GetRuleContext<CondContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SQB_R() { return GetTokens(LogoParser.SQB_R); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQB_R(int i) {
			return GetToken(LogoParser.SQB_R, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Instructions_genContext instructions_gen() {
			return GetRuleContext<Instructions_genContext>(0);
		}
		public If_commandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_command; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogoListener typedListener = listener as ILogoListener;
			if (typedListener != null) typedListener.EnterIf_command(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogoListener typedListener = listener as ILogoListener;
			if (typedListener != null) typedListener.ExitIf_command(this);
		}
	}

	[RuleVersion(0)]
	public If_commandContext if_command() {
		If_commandContext _localctx = new If_commandContext(Context, State);
		EnterRule(_localctx, 30, RULE_if_command);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 139;
			if_faker();
			State = 140;
			Match(SQB_L);
			State = 141;
			_localctx._cond = cond();
			State = 142;
			Match(SQB_R);
			State = 143;
			Match(SQB_L);
			State = 144;
			_localctx._instructions_gen = instructions_gen();
			State = 145;
			Match(SQB_R);
			 scheduler.AddCommand("IF_END", (_localctx._cond!=null?TokenStream.GetText(_localctx._cond.Start,_localctx._cond.Stop):null) + "%" + (_localctx._instructions_gen!=null?TokenStream.GetText(_localctx._instructions_gen.Start,_localctx._instructions_gen.Stop):null)); 
					
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_fakerContext : ParserRuleContext {
		public IToken _IF_SYM;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_SYM() { return GetToken(LogoParser.IF_SYM, 0); }
		public If_fakerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_faker; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogoListener typedListener = listener as ILogoListener;
			if (typedListener != null) typedListener.EnterIf_faker(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogoListener typedListener = listener as ILogoListener;
			if (typedListener != null) typedListener.ExitIf_faker(this);
		}
	}

	[RuleVersion(0)]
	public If_fakerContext if_faker() {
		If_fakerContext _localctx = new If_fakerContext(Context, State);
		EnterRule(_localctx, 32, RULE_if_faker);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 148;
			_localctx._IF_SYM = Match(IF_SYM);
			 scheduler.AddCommand((_localctx._IF_SYM!=null?_localctx._IF_SYM.Text:null), "qwe"); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class List_genContext : ParserRuleContext {
		public IdentifierContext _identifier;
		public List_typeContext _list_type;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAKE_SYM() { return GetToken(LogoParser.MAKE_SYM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public List_typeContext list_type() {
			return GetRuleContext<List_typeContext>(0);
		}
		public List_genContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list_gen; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogoListener typedListener = listener as ILogoListener;
			if (typedListener != null) typedListener.EnterList_gen(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogoListener typedListener = listener as ILogoListener;
			if (typedListener != null) typedListener.ExitList_gen(this);
		}
	}

	[RuleVersion(0)]
	public List_genContext list_gen() {
		List_genContext _localctx = new List_genContext(Context, State);
		EnterRule(_localctx, 34, RULE_list_gen);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 151;
			Match(MAKE_SYM);
			State = 152;
			_localctx._identifier = identifier();
			State = 153;
			_localctx._list_type = list_type();
			 scheduler.AddCommand("LST", (_localctx._identifier!=null?TokenStream.GetText(_localctx._identifier.Start,_localctx._identifier.Stop):null) + "%" + (_localctx._list_type!=null?TokenStream.GetText(_localctx._list_type.Start,_localctx._list_type.Stop):null) ); 
					
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assignment_genContext : ParserRuleContext {
		public IdentifierContext _identifier;
		public Value_genContext _value_gen;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAKE_SYM() { return GetToken(LogoParser.MAKE_SYM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Value_genContext value_gen() {
			return GetRuleContext<Value_genContext>(0);
		}
		public Assignment_genContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment_gen; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogoListener typedListener = listener as ILogoListener;
			if (typedListener != null) typedListener.EnterAssignment_gen(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogoListener typedListener = listener as ILogoListener;
			if (typedListener != null) typedListener.ExitAssignment_gen(this);
		}
	}

	[RuleVersion(0)]
	public Assignment_genContext assignment_gen() {
		Assignment_genContext _localctx = new Assignment_genContext(Context, State);
		EnterRule(_localctx, 36, RULE_assignment_gen);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 156;
			Match(MAKE_SYM);
			State = 157;
			_localctx._identifier = identifier();
			State = 158;
			_localctx._value_gen = value_gen();
			 scheduler.AddCommand("VAR", (_localctx._identifier!=null?TokenStream.GetText(_localctx._identifier.Start,_localctx._identifier.Stop):null) + "%" + (_localctx._value_gen!=null?TokenStream.GetText(_localctx._value_gen.Start,_localctx._value_gen.Stop):null)); 
					
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Output_instruction_genContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUTPUT_SYM() { return GetToken(LogoParser.OUTPUT_SYM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(LogoParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Value_genContext value_gen() {
			return GetRuleContext<Value_genContext>(0);
		}
		public Output_instruction_genContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_output_instruction_gen; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogoListener typedListener = listener as ILogoListener;
			if (typedListener != null) typedListener.EnterOutput_instruction_gen(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogoListener typedListener = listener as ILogoListener;
			if (typedListener != null) typedListener.ExitOutput_instruction_gen(this);
		}
	}

	[RuleVersion(0)]
	public Output_instruction_genContext output_instruction_gen() {
		Output_instruction_genContext _localctx = new Output_instruction_genContext(Context, State);
		EnterRule(_localctx, 38, RULE_output_instruction_gen);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 161;
			Match(OUTPUT_SYM);
			State = 162;
			Match(COLON);
			State = 163;
			value_gen();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Instruction_genContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(LogoParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Loop_genContext loop_gen() {
			return GetRuleContext<Loop_genContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Move_commandContext move_command() {
			return GetRuleContext<Move_commandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public List_genContext list_gen() {
			return GetRuleContext<List_genContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_genContext assignment_gen() {
			return GetRuleContext<Assignment_genContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pen_commandContext pen_command() {
			return GetRuleContext<Pen_commandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public If_commandContext if_command() {
			return GetRuleContext<If_commandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Output_instruction_genContext output_instruction_gen() {
			return GetRuleContext<Output_instruction_genContext>(0);
		}
		public Instruction_genContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instruction_gen; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogoListener typedListener = listener as ILogoListener;
			if (typedListener != null) typedListener.EnterInstruction_gen(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogoListener typedListener = listener as ILogoListener;
			if (typedListener != null) typedListener.ExitInstruction_gen(this);
		}
	}

	[RuleVersion(0)]
	public Instruction_genContext instruction_gen() {
		Instruction_genContext _localctx = new Instruction_genContext(Context, State);
		EnterRule(_localctx, 40, RULE_instruction_gen);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 173;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				{
				State = 165;
				loop_gen();
				}
				break;
			case 2:
				{
				State = 166;
				move_command();
				}
				break;
			case 3:
				{
				State = 167;
				list_gen();
				}
				break;
			case 4:
				{
				State = 168;
				assignment_gen();
				}
				break;
			case 5:
				{
				State = 169;
				move_command();
				}
				break;
			case 6:
				{
				State = 170;
				pen_command();
				}
				break;
			case 7:
				{
				State = 171;
				if_command();
				}
				break;
			case 8:
				{
				State = 172;
				output_instruction_gen();
				}
				break;
			}
			State = 175;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_instrContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO_SYM() { return GetToken(LogoParser.TO_SYM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Instructions_genContext instructions_gen() {
			return GetRuleContext<Instructions_genContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_SYM() { return GetToken(LogoParser.END_SYM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COLON() { return GetTokens(LogoParser.COLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON(int i) {
			return GetToken(LogoParser.COLON, i);
		}
		public Function_instrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_instr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogoListener typedListener = listener as ILogoListener;
			if (typedListener != null) typedListener.EnterFunction_instr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogoListener typedListener = listener as ILogoListener;
			if (typedListener != null) typedListener.ExitFunction_instr(this);
		}
	}

	[RuleVersion(0)]
	public Function_instrContext function_instr() {
		Function_instrContext _localctx = new Function_instrContext(Context, State);
		EnterRule(_localctx, 42, RULE_function_instr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 177;
			Match(TO_SYM);
			State = 178;
			identifier();
			State = 183;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COLON) {
				{
				{
				State = 179;
				Match(COLON);
				State = 180;
				identifier();
				}
				}
				State = 185;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 186;
			instructions_gen();
			State = 187;
			Match(END_SYM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Repeat_loopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Repeat_startContext repeat_start() {
			return GetRuleContext<Repeat_startContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQB_L() { return GetToken(LogoParser.SQB_L, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Instructions_genContext instructions_gen() {
			return GetRuleContext<Instructions_genContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQB_R() { return GetToken(LogoParser.SQB_R, 0); }
		public Repeat_loopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeat_loop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogoListener typedListener = listener as ILogoListener;
			if (typedListener != null) typedListener.EnterRepeat_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogoListener typedListener = listener as ILogoListener;
			if (typedListener != null) typedListener.ExitRepeat_loop(this);
		}
	}

	[RuleVersion(0)]
	public Repeat_loopContext repeat_loop() {
		Repeat_loopContext _localctx = new Repeat_loopContext(Context, State);
		EnterRule(_localctx, 44, RULE_repeat_loop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 189;
			repeat_start();
			State = 190;
			Match(SQB_L);
			State = 191;
			instructions_gen();
			State = 192;
			Match(SQB_R);
			 scheduler.AddCommand("REPEAT_END", ""); 
					
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Repeat_startContext : ParserRuleContext {
		public IToken _REPEAT_SYM;
		public Value_genContext _value_gen;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPEAT_SYM() { return GetToken(LogoParser.REPEAT_SYM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Value_genContext value_gen() {
			return GetRuleContext<Value_genContext>(0);
		}
		public Repeat_startContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeat_start; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogoListener typedListener = listener as ILogoListener;
			if (typedListener != null) typedListener.EnterRepeat_start(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogoListener typedListener = listener as ILogoListener;
			if (typedListener != null) typedListener.ExitRepeat_start(this);
		}
	}

	[RuleVersion(0)]
	public Repeat_startContext repeat_start() {
		Repeat_startContext _localctx = new Repeat_startContext(Context, State);
		EnterRule(_localctx, 46, RULE_repeat_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 195;
			_localctx._REPEAT_SYM = Match(REPEAT_SYM);
			State = 196;
			_localctx._value_gen = value_gen();
			 scheduler.AddCommand((_localctx._REPEAT_SYM!=null?_localctx._REPEAT_SYM.Text:null), (_localctx._value_gen!=null?TokenStream.GetText(_localctx._value_gen.Start,_localctx._value_gen.Stop):null)); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class While_loopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE_SYM() { return GetToken(LogoParser.WHILE_SYM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SQB_L() { return GetTokens(LogoParser.SQB_L); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQB_L(int i) {
			return GetToken(LogoParser.SQB_L, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CondContext cond() {
			return GetRuleContext<CondContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SQB_R() { return GetTokens(LogoParser.SQB_R); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQB_R(int i) {
			return GetToken(LogoParser.SQB_R, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Instructions_genContext instructions_gen() {
			return GetRuleContext<Instructions_genContext>(0);
		}
		public While_loopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while_loop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogoListener typedListener = listener as ILogoListener;
			if (typedListener != null) typedListener.EnterWhile_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogoListener typedListener = listener as ILogoListener;
			if (typedListener != null) typedListener.ExitWhile_loop(this);
		}
	}

	[RuleVersion(0)]
	public While_loopContext while_loop() {
		While_loopContext _localctx = new While_loopContext(Context, State);
		EnterRule(_localctx, 48, RULE_while_loop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 199;
			Match(WHILE_SYM);
			State = 200;
			Match(SQB_L);
			State = 201;
			cond();
			State = 202;
			Match(SQB_R);
			State = 203;
			Match(SQB_L);
			State = 204;
			instructions_gen();
			State = 205;
			Match(SQB_R);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Loop_genContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Repeat_loopContext repeat_loop() {
			return GetRuleContext<Repeat_loopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public While_loopContext while_loop() {
			return GetRuleContext<While_loopContext>(0);
		}
		public Loop_genContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loop_gen; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogoListener typedListener = listener as ILogoListener;
			if (typedListener != null) typedListener.EnterLoop_gen(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogoListener typedListener = listener as ILogoListener;
			if (typedListener != null) typedListener.ExitLoop_gen(this);
		}
	}

	[RuleVersion(0)]
	public Loop_genContext loop_gen() {
		Loop_genContext _localctx = new Loop_genContext(Context, State);
		EnterRule(_localctx, 50, RULE_loop_gen);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 209;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case REPEAT_SYM:
				{
				State = 207;
				repeat_loop();
				}
				break;
			case WHILE_SYM:
				{
				State = 208;
				while_loop();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Instructions_genContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Instruction_genContext[] instruction_gen() {
			return GetRuleContexts<Instruction_genContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Instruction_genContext instruction_gen(int i) {
			return GetRuleContext<Instruction_genContext>(i);
		}
		public Instructions_genContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instructions_gen; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogoListener typedListener = listener as ILogoListener;
			if (typedListener != null) typedListener.EnterInstructions_gen(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogoListener typedListener = listener as ILogoListener;
			if (typedListener != null) typedListener.ExitInstructions_gen(this);
		}
	}

	[RuleVersion(0)]
	public Instructions_genContext instructions_gen() {
		Instructions_genContext _localctx = new Instructions_genContext(Context, State);
		EnterRule(_localctx, 52, RULE_instructions_gen);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 212;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 211;
				instruction_gen();
				}
				}
				State = 214;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MAKE_SYM) | (1L << IF_SYM) | (1L << REPEAT_SYM) | (1L << WHILE_SYM) | (1L << OUTPUT_SYM) | (1L << MOVE_FD) | (1L << MOVE_BK) | (1L << MOVE_LT) | (1L << MOVE_RT) | (1L << PEN_UP) | (1L << PEN_DOWN))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StarterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Instructions_genContext instructions_gen() {
			return GetRuleContext<Instructions_genContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_instrContext function_instr() {
			return GetRuleContext<Function_instrContext>(0);
		}
		public StarterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_starter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogoListener typedListener = listener as ILogoListener;
			if (typedListener != null) typedListener.EnterStarter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogoListener typedListener = listener as ILogoListener;
			if (typedListener != null) typedListener.ExitStarter(this);
		}
	}

	[RuleVersion(0)]
	public StarterContext starter() {
		StarterContext _localctx = new StarterContext(Context, State);
		EnterRule(_localctx, 54, RULE_starter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 218;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MAKE_SYM:
			case IF_SYM:
			case REPEAT_SYM:
			case WHILE_SYM:
			case OUTPUT_SYM:
			case MOVE_FD:
			case MOVE_BK:
			case MOVE_LT:
			case MOVE_RT:
			case PEN_UP:
			case PEN_DOWN:
				{
				State = 216;
				instructions_gen();
				}
				break;
			case TO_SYM:
				{
				State = 217;
				function_instr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			 scheduler.Execute(); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,36,223,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,1,0,4,0,58,
		8,0,11,0,12,0,59,1,1,1,1,1,1,1,1,1,2,1,2,5,2,68,8,2,10,2,12,2,71,9,2,1,
		2,1,2,1,3,1,3,5,3,77,8,3,10,3,12,3,80,9,3,1,4,1,4,1,5,1,5,1,6,1,6,3,6,
		88,8,6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,
		105,8,8,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,11,1,11,1,11,3,11,118,8,
		11,1,11,1,11,1,11,3,11,123,8,11,5,11,125,8,11,10,11,12,11,128,9,11,1,11,
		1,11,1,12,1,12,1,13,1,13,1,13,1,13,1,14,1,14,1,15,1,15,1,15,1,15,1,15,
		1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,18,1,18,
		1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
		1,20,3,20,174,8,20,1,20,1,20,1,21,1,21,1,21,1,21,5,21,182,8,21,10,21,12,
		21,185,9,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,
		1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,3,25,210,8,25,1,
		26,4,26,213,8,26,11,26,12,26,214,1,27,1,27,3,27,219,8,27,1,27,1,27,1,27,
		0,0,28,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,
		46,48,50,52,54,0,5,1,0,2,3,1,0,7,10,1,0,15,20,1,0,30,33,1,0,34,35,215,
		0,57,1,0,0,0,2,61,1,0,0,0,4,65,1,0,0,0,6,74,1,0,0,0,8,81,1,0,0,0,10,83,
		1,0,0,0,12,87,1,0,0,0,14,89,1,0,0,0,16,104,1,0,0,0,18,106,1,0,0,0,20,110,
		1,0,0,0,22,114,1,0,0,0,24,131,1,0,0,0,26,133,1,0,0,0,28,137,1,0,0,0,30,
		139,1,0,0,0,32,148,1,0,0,0,34,151,1,0,0,0,36,156,1,0,0,0,38,161,1,0,0,
		0,40,173,1,0,0,0,42,177,1,0,0,0,44,189,1,0,0,0,46,195,1,0,0,0,48,199,1,
		0,0,0,50,209,1,0,0,0,52,212,1,0,0,0,54,218,1,0,0,0,56,58,5,2,0,0,57,56,
		1,0,0,0,58,59,1,0,0,0,59,57,1,0,0,0,59,60,1,0,0,0,60,1,1,0,0,0,61,62,3,
		0,0,0,62,63,5,1,0,0,63,64,3,0,0,0,64,3,1,0,0,0,65,69,5,6,0,0,66,68,7,0,
		0,0,67,66,1,0,0,0,68,71,1,0,0,0,69,67,1,0,0,0,69,70,1,0,0,0,70,72,1,0,
		0,0,71,69,1,0,0,0,72,73,5,6,0,0,73,5,1,0,0,0,74,78,5,3,0,0,75,77,5,3,0,
		0,76,75,1,0,0,0,77,80,1,0,0,0,78,76,1,0,0,0,78,79,1,0,0,0,79,7,1,0,0,0,
		80,78,1,0,0,0,81,82,7,1,0,0,82,9,1,0,0,0,83,84,7,2,0,0,84,11,1,0,0,0,85,
		88,3,0,0,0,86,88,3,2,1,0,87,85,1,0,0,0,87,86,1,0,0,0,88,13,1,0,0,0,89,
		90,3,12,6,0,90,91,3,8,4,0,91,92,3,12,6,0,92,15,1,0,0,0,93,105,3,12,6,0,
		94,95,3,6,3,0,95,96,3,18,9,0,96,105,1,0,0,0,97,98,3,6,3,0,98,99,5,1,0,
		0,99,105,1,0,0,0,100,101,3,12,6,0,101,102,3,8,4,0,102,103,3,12,6,0,103,
		105,1,0,0,0,104,93,1,0,0,0,104,94,1,0,0,0,104,97,1,0,0,0,104,100,1,0,0,
		0,105,17,1,0,0,0,106,107,5,13,0,0,107,108,3,16,8,0,108,109,5,14,0,0,109,
		19,1,0,0,0,110,111,3,16,8,0,111,112,3,10,5,0,112,113,3,16,8,0,113,21,1,
		0,0,0,114,117,5,13,0,0,115,118,3,16,8,0,116,118,3,22,11,0,117,115,1,0,
		0,0,117,116,1,0,0,0,118,126,1,0,0,0,119,122,5,5,0,0,120,123,3,16,8,0,121,
		123,3,22,11,0,122,120,1,0,0,0,122,121,1,0,0,0,123,125,1,0,0,0,124,119,
		1,0,0,0,125,128,1,0,0,0,126,124,1,0,0,0,126,127,1,0,0,0,127,129,1,0,0,
		0,128,126,1,0,0,0,129,130,5,14,0,0,130,23,1,0,0,0,131,132,7,3,0,0,132,
		25,1,0,0,0,133,134,3,24,12,0,134,135,3,16,8,0,135,136,6,13,-1,0,136,27,
		1,0,0,0,137,138,7,4,0,0,138,29,1,0,0,0,139,140,3,32,16,0,140,141,5,13,
		0,0,141,142,3,20,10,0,142,143,5,14,0,0,143,144,5,13,0,0,144,145,3,52,26,
		0,145,146,5,14,0,0,146,147,6,15,-1,0,147,31,1,0,0,0,148,149,5,26,0,0,149,
		150,6,16,-1,0,150,33,1,0,0,0,151,152,5,22,0,0,152,153,3,6,3,0,153,154,
		3,22,11,0,154,155,6,17,-1,0,155,35,1,0,0,0,156,157,5,22,0,0,157,158,3,
		6,3,0,158,159,3,16,8,0,159,160,6,18,-1,0,160,37,1,0,0,0,161,162,5,29,0,
		0,162,163,5,4,0,0,163,164,3,16,8,0,164,39,1,0,0,0,165,174,3,50,25,0,166,
		174,3,26,13,0,167,174,3,34,17,0,168,174,3,36,18,0,169,174,3,26,13,0,170,
		174,3,28,14,0,171,174,3,30,15,0,172,174,3,38,19,0,173,165,1,0,0,0,173,
		166,1,0,0,0,173,167,1,0,0,0,173,168,1,0,0,0,173,169,1,0,0,0,173,170,1,
		0,0,0,173,171,1,0,0,0,173,172,1,0,0,0,174,175,1,0,0,0,175,176,5,21,0,0,
		176,41,1,0,0,0,177,178,5,24,0,0,178,183,3,6,3,0,179,180,5,4,0,0,180,182,
		3,6,3,0,181,179,1,0,0,0,182,185,1,0,0,0,183,181,1,0,0,0,183,184,1,0,0,
		0,184,186,1,0,0,0,185,183,1,0,0,0,186,187,3,52,26,0,187,188,5,25,0,0,188,
		43,1,0,0,0,189,190,3,46,23,0,190,191,5,13,0,0,191,192,3,52,26,0,192,193,
		5,14,0,0,193,194,6,22,-1,0,194,45,1,0,0,0,195,196,5,27,0,0,196,197,3,16,
		8,0,197,198,6,23,-1,0,198,47,1,0,0,0,199,200,5,28,0,0,200,201,5,13,0,0,
		201,202,3,20,10,0,202,203,5,14,0,0,203,204,5,13,0,0,204,205,3,52,26,0,
		205,206,5,14,0,0,206,49,1,0,0,0,207,210,3,44,22,0,208,210,3,48,24,0,209,
		207,1,0,0,0,209,208,1,0,0,0,210,51,1,0,0,0,211,213,3,40,20,0,212,211,1,
		0,0,0,213,214,1,0,0,0,214,212,1,0,0,0,214,215,1,0,0,0,215,53,1,0,0,0,216,
		219,3,52,26,0,217,219,3,42,21,0,218,216,1,0,0,0,218,217,1,0,0,0,219,220,
		1,0,0,0,220,221,6,27,-1,0,221,55,1,0,0,0,13,59,69,78,87,104,117,122,126,
		173,183,209,214,218
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
