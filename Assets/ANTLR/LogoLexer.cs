//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Logo.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class LogoLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		DOT=1, DIGIT=2, LETTER=3, COLON=4, COMMA=5, QUOTE=6, OPER_ADD=7, OPER_SUB=8, 
		OPER_MUL=9, OPER_DIV=10, BRA_L=11, BRA_R=12, SQB_L=13, SQB_R=14, COMP_EQ=15, 
		COMP_L=16, COMP_LE=17, COMP_G=18, COMP_GE=19, COMP_NE=20, SEMI=21, MAKE_SYM=22, 
		LOCAL_SYM=23, TO_SYM=24, END_SYM=25, IF_SYM=26, REPEAT_SYM=27, WHILE_SYM=28, 
		OUTPUT_SYM=29, MOVE_FD=30, MOVE_BK=31, MOVE_LT=32, MOVE_RT=33, PEN_UP=34, 
		PEN_DOWN=35, WHITESPACE=36;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"DOT", "DIGIT", "LOWERCASE", "UPPERCASE", "LETTER", "COLON", "COMMA", 
		"QUOTE", "OPER_ADD", "OPER_SUB", "OPER_MUL", "OPER_DIV", "BRA_L", "BRA_R", 
		"SQB_L", "SQB_R", "COMP_EQ", "COMP_L", "COMP_LE", "COMP_G", "COMP_GE", 
		"COMP_NE", "SEMI", "MAKE_SYM", "LOCAL_SYM", "TO_SYM", "END_SYM", "IF_SYM", 
		"REPEAT_SYM", "WHILE_SYM", "OUTPUT_SYM", "MOVE_FD", "MOVE_BK", "MOVE_LT", 
		"MOVE_RT", "PEN_UP", "PEN_DOWN", "WHITESPACE"
	};


		// using UnityEngine;
	 	// using System.Collections;
		public Scheduler scheduler = new Scheduler();
		// public TurtleControl controller = GameObject.Find("Turtle").GetComponent<TurtleControl>();


	public LogoLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public LogoLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'.'", null, null, "':'", "','", "'\"'", "'+'", "'-'", "'*'", "'/'", 
		"'('", "')'", "'['", "']'", "'='", "'<'", "'<='", "'>'", "'>='", "'!='", 
		"';'", "'MAKE'", "'LOCAL'", "'TO'", "'END'", "'IF'", "'REPEAT'", "'WHILE'", 
		"'OUTPUT'", "'FD'", "'BK'", "'LT'", "'RT'", "'PU'", "'PD'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "DOT", "DIGIT", "LETTER", "COLON", "COMMA", "QUOTE", "OPER_ADD", 
		"OPER_SUB", "OPER_MUL", "OPER_DIV", "BRA_L", "BRA_R", "SQB_L", "SQB_R", 
		"COMP_EQ", "COMP_L", "COMP_LE", "COMP_G", "COMP_GE", "COMP_NE", "SEMI", 
		"MAKE_SYM", "LOCAL_SYM", "TO_SYM", "END_SYM", "IF_SYM", "REPEAT_SYM", 
		"WHILE_SYM", "OUTPUT_SYM", "MOVE_FD", "MOVE_BK", "MOVE_LT", "MOVE_RT", 
		"PEN_UP", "PEN_DOWN", "WHITESPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Logo.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static LogoLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,36,191,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,3,4,88,
		8,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,
		12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,18,1,
		19,1,19,1,20,1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,23,1,23,1,23,1,23,1,
		23,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,
		27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,
		29,1,29,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,32,1,32,1,
		32,1,33,1,33,1,33,1,34,1,34,1,34,1,35,1,35,1,35,1,36,1,36,1,36,1,37,1,
		37,1,37,1,37,0,0,38,1,1,3,2,5,0,7,0,9,3,11,4,13,5,15,6,17,7,19,8,21,9,
		23,10,25,11,27,12,29,13,31,14,33,15,35,16,37,17,39,18,41,19,43,20,45,21,
		47,22,49,23,51,24,53,25,55,26,57,27,59,28,61,29,63,30,65,31,67,32,69,33,
		71,34,73,35,75,36,1,0,4,1,0,48,57,1,0,97,122,1,0,65,90,3,0,9,10,13,13,
		32,32,189,0,1,1,0,0,0,0,3,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,
		0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,
		1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,
		0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,
		1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,
		0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,
		1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,1,77,1,0,0,0,3,79,1,0,0,
		0,5,81,1,0,0,0,7,83,1,0,0,0,9,87,1,0,0,0,11,89,1,0,0,0,13,91,1,0,0,0,15,
		93,1,0,0,0,17,95,1,0,0,0,19,97,1,0,0,0,21,99,1,0,0,0,23,101,1,0,0,0,25,
		103,1,0,0,0,27,105,1,0,0,0,29,107,1,0,0,0,31,109,1,0,0,0,33,111,1,0,0,
		0,35,113,1,0,0,0,37,115,1,0,0,0,39,118,1,0,0,0,41,120,1,0,0,0,43,123,1,
		0,0,0,45,126,1,0,0,0,47,128,1,0,0,0,49,133,1,0,0,0,51,139,1,0,0,0,53,142,
		1,0,0,0,55,146,1,0,0,0,57,149,1,0,0,0,59,156,1,0,0,0,61,162,1,0,0,0,63,
		169,1,0,0,0,65,172,1,0,0,0,67,175,1,0,0,0,69,178,1,0,0,0,71,181,1,0,0,
		0,73,184,1,0,0,0,75,187,1,0,0,0,77,78,5,46,0,0,78,2,1,0,0,0,79,80,7,0,
		0,0,80,4,1,0,0,0,81,82,7,1,0,0,82,6,1,0,0,0,83,84,7,2,0,0,84,8,1,0,0,0,
		85,88,3,5,2,0,86,88,3,7,3,0,87,85,1,0,0,0,87,86,1,0,0,0,88,10,1,0,0,0,
		89,90,5,58,0,0,90,12,1,0,0,0,91,92,5,44,0,0,92,14,1,0,0,0,93,94,5,34,0,
		0,94,16,1,0,0,0,95,96,5,43,0,0,96,18,1,0,0,0,97,98,5,45,0,0,98,20,1,0,
		0,0,99,100,5,42,0,0,100,22,1,0,0,0,101,102,5,47,0,0,102,24,1,0,0,0,103,
		104,5,40,0,0,104,26,1,0,0,0,105,106,5,41,0,0,106,28,1,0,0,0,107,108,5,
		91,0,0,108,30,1,0,0,0,109,110,5,93,0,0,110,32,1,0,0,0,111,112,5,61,0,0,
		112,34,1,0,0,0,113,114,5,60,0,0,114,36,1,0,0,0,115,116,5,60,0,0,116,117,
		5,61,0,0,117,38,1,0,0,0,118,119,5,62,0,0,119,40,1,0,0,0,120,121,5,62,0,
		0,121,122,5,61,0,0,122,42,1,0,0,0,123,124,5,33,0,0,124,125,5,61,0,0,125,
		44,1,0,0,0,126,127,5,59,0,0,127,46,1,0,0,0,128,129,5,77,0,0,129,130,5,
		65,0,0,130,131,5,75,0,0,131,132,5,69,0,0,132,48,1,0,0,0,133,134,5,76,0,
		0,134,135,5,79,0,0,135,136,5,67,0,0,136,137,5,65,0,0,137,138,5,76,0,0,
		138,50,1,0,0,0,139,140,5,84,0,0,140,141,5,79,0,0,141,52,1,0,0,0,142,143,
		5,69,0,0,143,144,5,78,0,0,144,145,5,68,0,0,145,54,1,0,0,0,146,147,5,73,
		0,0,147,148,5,70,0,0,148,56,1,0,0,0,149,150,5,82,0,0,150,151,5,69,0,0,
		151,152,5,80,0,0,152,153,5,69,0,0,153,154,5,65,0,0,154,155,5,84,0,0,155,
		58,1,0,0,0,156,157,5,87,0,0,157,158,5,72,0,0,158,159,5,73,0,0,159,160,
		5,76,0,0,160,161,5,69,0,0,161,60,1,0,0,0,162,163,5,79,0,0,163,164,5,85,
		0,0,164,165,5,84,0,0,165,166,5,80,0,0,166,167,5,85,0,0,167,168,5,84,0,
		0,168,62,1,0,0,0,169,170,5,70,0,0,170,171,5,68,0,0,171,64,1,0,0,0,172,
		173,5,66,0,0,173,174,5,75,0,0,174,66,1,0,0,0,175,176,5,76,0,0,176,177,
		5,84,0,0,177,68,1,0,0,0,178,179,5,82,0,0,179,180,5,84,0,0,180,70,1,0,0,
		0,181,182,5,80,0,0,182,183,5,85,0,0,183,72,1,0,0,0,184,185,5,80,0,0,185,
		186,5,68,0,0,186,74,1,0,0,0,187,188,7,3,0,0,188,189,1,0,0,0,189,190,6,
		37,0,0,190,76,1,0,0,0,2,0,87,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
